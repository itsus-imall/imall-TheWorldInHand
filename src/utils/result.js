const result = {
  '무거운 게 불편해요':
    '일상을 살아가는 데 센스가 담겨있는 사람이에요. 무거운 걸 들고있는 것 만큼 불편한 게 없으니까요.',
  '튼튼하지 않은 것 같아요':
    '소중함을 아는 사람이에요. 위험한 길가나 둔탁한 물건에 부딪힐 확률까지 생각하는 가장 똑똑한 두뇌를 갖고 있죠.',
  '금방 누래져요':
    '귀차니즘과 깔끔함이 가장 잘 드러나는 성향이에요. 공존하기 힘든 두가지를 가지고 있는 특별함이 있죠.',
  '지문이 쉽게 묻어요': '나에게 좋으면 좋은걸 아는 쿨한 매력을 가지고 있어요.',
  '너무 두꺼워요':
    '내게 맞는 제품을 찾기 위해 여정을 떠나는 섬세한 사람이에요. 길고 긴 여정 끝엔 원하는 바람을 이룰 수 있는 유형이에요.',
  '지문이 너무 묻어요':
    '남들이 쉽게 보지 못하는 어떠한 것을 발견하는 특별한 시각을 가지고 있어요. 이제 그 시야로 복잡했던 것들도 깔끔하게 정돈하는 특별한 능력이 발휘될 거에요.',
  '필름이 연약해요':
    '효율성을 중시해요. 길게 설명하는 것보다 깔끔하고 완벽한 것을 추구해요.',
  '풀커버였으면 좋겠어요':
    '소중한 것을 제대로 지킬 수 있는 사람이에요. 어느정도의 완벽함을 유지하는 데엔 일가견이 있어요.',
  '1만원대 이하':
    '비용대비 가치를 즐기는 가심비 그 자체인 사람들이에요. 실용적인 라이프스타일을 선호하는 경향이 있어요.',
  '1만원대 이상':
    '상품에 대한 퀄리티와 가성비를 모두 챙기는 경향이 있어요. 리뷰를 분석하고 비교하여 최고를 분간할 수 있는 스마트하다는 특징을 가지고 있어요.',
  '2만원대 이상':
    '품질과 성능에 대한 완벽함을 추구하는 사람이에요. 상품에 대한 가치가 오래가면 오래갈수록 의미있는 사람이며 최고의 제품을 찾기 위해 달려온 사람이에요.',
  '뛰어난 내구성과 안정적인 핏':
    '효율적이에요. 모든 물건을 구매할 때 망설이지 않고 자신한테 최적화된 상품을 구매해요. 하지만 어디까지나 내가 관심있는 물건에 한해서만이에요.',
  '얇은 두께로 슬림함':
    '이동성을 중요시하는 매력적인 성향이에요. 간결하고 정돈된 걸 선호하며 복잡한 불호하는 경향이 있어요.',
  '풀커버 보호로 완벽한 충격 흡수':
    '어떤 기종을 사용하던 오래 사용하는 법이에요.',
  '지문 방지가 되는 매트함':
    '불편한 부분을 확실하게 알고 내가 원하는 부분을 발견해내는 특별한 능력이 있어요.',
  '2가지 이하':
    '좋은게 확실한 사람이에요. 그만큼 만족을 위한 나날들을 보내는 멋있는 일상을 가진 사람이에요. ',
  '3가지 이상':
    '일상을 색으로 나타난다면 자신이 좋아하는 게 분명한 알록달록한 사람일 거에요. 내가 좋아하는 색이 있다는 만큼 확실한 건 없죠.',
  '자주 떨어트린다':
    '주위 사람들에게 자주 떨어트린다며 챙김을 받기도 하지만 사실은 완벽주의 성향이 빛나고 있어요. 하지만 때론 완벽한 결과가 아니더라도 새로운 도전도 나쁘지 않을거에요',
  드물다:
    '떨어트림의 빈도가 드물수록 자신의 능력과 기술에 확신을 갖고 움직이고 있는 사람이래요. 얼마나 멋진 사람인지 궁금한걸요?',
  '스크래치 방지':
    '섬세한 성향을 가져 내가 가진 물건을 부드럽게 아끼고 있어요. 아름다움과 디자인에 대한 감각을 가지는 특별한 사람이에요.',
  지문방지:
    '제품을 구매할 때 품질을 중요시하는 편이에요. 가치가 잘 드러나는 만큼 오랫동안 사용하는 제품을 유지하려는 목적을 가지고 있어요.',
  프라이버시:
    '타인으로부터 간섭을 최소화하려는 사람이에요. 생활 공간이나 일상 활동을 사적인 영역으로 지켜 자유롭게 행동하는 구름같은 사람이에요.',
  '우수한 화질':
    '시각적 감각과 미적 감각에 민감한 가능성이 높아요. 고품질의 화질을 통해 콘텐츠 미디어를 소비하는 즐거움을 가지고 있어요. 미디어 컨텐츠를 풍부하게 즐기는 멋쟁이에요.',
  '카메라 보호':
    '추억과 기록을 중요하게 여겨요. 순간을 촬영하여 기록함으로써 모든 일상을 소중하게 생각하는 특별함이 있어요.',
};

const img = [
  { type: ['소재', '색상', '가격'], robot: '윌도' },
  { type: ['소재', '색상', '두께'], robot: '아블라' },
  { type: ['소재', '색상', '보호력'], robot: '앤벌' },
  { type: ['소재', '두께', '가격'], robot: '마일러' },
  { type: ['소재', '보호력', '가격'], robot: '이어리' },
  { type: ['소재', '두께', '보호력'], robot: '델마' },
  { type: ['보호력', '색상', '가격'], robot: '라야' },
  { type: ['두께', '색상', '가격'], robot: '줄리' },
  { type: ['두께', '색상', '보호력'], robot: '웬디' },
  { type: ['보호력', '두께', '가격'], robot: '헤일러' },
];

export const getRobotResult = payment => {
  const selected = payment[5];
  const colorIndex = selected.findIndex(arr => arr === '색상');
  const robot = findRobot(selected);
  const contents = findContents([...payment].splice(6, 3), colorIndex);
  return { contents, robot };
};

const findRobot = typeToFind => {
  const foundObj = img.find(obj => {
    const sortedObjType = obj.type.slice().sort();
    const sortedTypeToFind = typeToFind.slice().sort();
    return JSON.stringify(sortedObjType) === JSON.stringify(sortedTypeToFind);
  });
  return foundObj ? foundObj.robot : null;
};

const findContents = (questions, colorIndex) => {
  const contents = questions.map((question, index) => {
    if (colorIndex === index)
      return [result[question.length > 2 ? '3가지 이상' : '2가지 이하']];
    return question.map(a => result[a]);
  });
  return contents;
};
